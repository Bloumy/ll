{"version":3,"sources":["node_modules/hammerjs/hammer.js"],"names":["window","document","exportName","undefined","VENDOR_PREFIXES","assign","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","arguments","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","baseP","childP","prototype","create","constructor","_super","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offset","offsetDelta","prevDelta","prevInput","deltaX","deltaY","x","y","offsetDirection","getDirection","overallVelocity","getVelocity","overallVelocityX","overallVelocityY","scale","start","end","rotation","getRotation","maxPointers","computeIntervalInputData","last","velocity","velocityX","velocityY","direction","lastInterval","v","getScale","srcEvent","emit","recognize","clientX","clientY","p1","p2","props","sqrt","atan2","PI","evEl","evTarget","evWin","MOUSE_INPUT_MAP","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","MouseInput","pressed","button","which","INPUT_TYPE_MOUSE","POINTER_INPUT_MAP","IE10_POINTER_TYPE_ENUM","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_KINECT","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","PointerEventInput","store","pointerEvents","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","pointerType","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","touches","normalizeSingleTouches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","TouchInput","targetIds","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","TouchMouseInput","mouse","primaryTouch","lastTouches","setLastTouch","eventData","lastTouch","lts","removeLastTouch","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","recordTouches","isSyntheticEvent","t","dx","dy","destroy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","touchMap","cssSupports","CSS","supports","TouchAction","value","set","compute","actions","touchAction","cleanTouchActions","recognizers","recognizer","getTouchAction","hasPanX","hasPanY","join","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","Recognizer","defaults","id","state","simultaneous","requireFail","stateStr","directionStr","getRecognizerByNameIfManager","otherRecognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","Hammer","preset","Manager","update","recognizeWith","requireFailure","event","additionalEvent","canEmit","inputDataClone","reset","process","tryEmit","optionPointers","isRecognized","isValid","attrTest","hasMoved","threshold","directionTest","inOut","validPointers","validMovement","validTime","time","STATE_FAILED","validTouchTime","failTimeout","validInterval","interval","validMultiTap","posThreshold","tapCount","taps","hasRequireFailures","VERSION","TOUCH_ACTION_COMPUTE","createInputInstance","handlers","oldCssProps","inputClass","item","add","toggleCssProps","cssProps","force","stopped","preventDefaults","curRecognizer","canRecognizeWith","existing","remove","events","data","domEvents","triggerDomEvent","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","define","amd","module","exports"],"mappings":"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","file":"hammer.7047284c.map","sourceRoot":"..","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n"]}